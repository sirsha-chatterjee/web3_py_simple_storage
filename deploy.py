from solcx import compile_standard, install_solc
from web3 import Web3
import json
import os

from dotenv import load_dotenv

load_dotenv()

with open(
    "E:\SolidityTuts\demos\web3_py_simple_storage\simple_storage.sol", "r"
) as file:
    simple_storage_file = file.read()
    # print(simple_storage_file)

# install solc version 0.6.0
install_solc("0.6.0")

# Compile our solidity
compiled_sol = compile_standard(
    {
        "language": "Solidity",
        "sources": {"SimpleStorage.sol": {"content": simple_storage_file}},
        "settings": {
            "outputSelection": {
                "*": {
                    "*": ["abi", "metadata", "evm.bytecode", "evm.bytecode.sourceMap"]
                }
            }
        },
    },
    solc_version="0.6.0",
)

with open("compiled_sol.json", "w") as file:
    json.dump(compiled_sol, file)
# print(compiled_sol)

# get bytecode
bytecode = compiled_sol["contracts"]["SimpleStorage.sol"]["SimpleStorage"]["evm"][
    "bytecode"
]["object"]

# get abi
abi = json.loads(
    compiled_sol["contracts"]["SimpleStorage.sol"]["SimpleStorage"]["metadata"]
)["output"]["abi"]

# for connecting to ganache
w3 = Web3(
    Web3.HTTPProvider("https://rinkeby.infura.io/v3/932b3b729fce4274a00ed96cc4ff7fe6")
)
chain_id = 4
my_address = "0x9E880b6eEBE2B6692A76148A400BeBE7e508d675"

# set private key as an environment variable, for security
private_key = os.getenv("PRIVATE_KEY")

# Create the contract in python
Simple_storage = w3.eth.contract(abi=abi, bytecode=bytecode)
# print(Simple_storage)

# We need to get the nonce for the transaction ( nonce -> we set it to by getting the latest transaction count)
nonce = w3.eth.get_transaction_count(my_address)
# print(nonce)

# Now we have to do a transaction in order to post the contract on the blockchain:
# 1. Build a transaction
# 2. Sign a transaction
# 3. Send the transaction

# 1. Build a transaction:
transaction = Simple_storage.constructor().buildTransaction(
    {
        "gasPrice": w3.eth.gas_price,
        "chainId": chain_id,
        "from": my_address,
        "nonce": nonce,
    }
)

# print(transaction)
# output: {'value': 0, 'gas': 366119, 'gasPrice': 20000000000, 'chainId': 1337, 'from': '0x91cf9AD77Ec5D656Cd1E4bbdB28e56e91e82383e', 'nonce': 0, 'data': '0x608060405234801561001057600080fd5b506105aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100a85780638bab8dd51461016d5780639e7a13ad1461023c575b600080fd5b6100646102ea565b6040518082815260200191505060405180910390f35b6100a66004803603602081101561009057600080fd5b81019080803590602001909291905050506102f3565b005b61016b600480360360408110156100be57600080fd5b81019080803590602001906401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506102fd565b005b6102266004803603602081101561018357600080fd5b81019080803590602001906401000000008111156101a057600080fd5b8201836020820111156101b257600080fd5b803590602001918460018302840111640100000000831117156101d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103d8565b6040518082815260200191505060405180910390f35b6102686004803603602081101561025257600080fd5b8101908080359060200190929190505050610406565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102ae578082015181840152602081019050610293565b50505050905090810190601f1680156102db5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60008054905090565b8060008190555050565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906103639291906104cf565b505050806002836040518082805190602001908083835b6020831061039d578051825260208201915060208101905060208303925061037a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061041357fe5b9060005260206000209060020201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c55780601f1061049a576101008083540402835291602001916104c5565b820191906000526020600020905b8154815290600101906020018083116104a857829003601f168201915b5050505050905082565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061051057805160ff191683800117855561053e565b8280016001018555821561053e579182015b8281111561053d578251825591602001919060010190610522565b5b50905061054b919061054f565b5090565b61057191905b8082111561056d576000816000905550600101610555565b5090565b9056fea2646970667358221220d9b8ea0e68438465b021c55d52533e2799c85298b041485d12676b8f685f1f4764736f6c63430006000033', 'to': b''}
# the data attribute encompasses the entire simple_storage.sol contract , and 'to' attribute is null since we havent assigend a reciever for the transaction

# 2. Sign a transaction:
signed_txn = w3.eth.account.sign_transaction(transaction, private_key=private_key)
# print(signed_txn)
# output: SignedTransaction(rawTransaction=HexBytes('0xf9061f808504a817c800830596278080b905ca608060405234801561001057600080fd5b506105aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100a85780638bab8dd51461016d5780639e7a13ad1461023c575b600080fd5b6100646102ea565b6040518082815260200191505060405180910390f35b6100a66004803603602081101561009057600080fd5b81019080803590602001909291905050506102f3565b005b61016b600480360360408110156100be57600080fd5b81019080803590602001906401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506102fd565b005b6102266004803603602081101561018357600080fd5b81019080803590602001906401000000008111156101a057600080fd5b8201836020820111156101b257600080fd5b803590602001918460018302840111640100000000831117156101d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103d8565b6040518082815260200191505060405180910390f35b6102686004803603602081101561025257600080fd5b8101908080359060200190929190505050610406565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102ae578082015181840152602081019050610293565b50505050905090810190601f1680156102db5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60008054905090565b8060008190555050565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906103639291906104cf565b505050806002836040518082805190602001908083835b6020831061039d578051825260208201915060208101905060208303925061037a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061041357fe5b9060005260206000209060020201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c55780601f1061049a576101008083540402835291602001916104c5565b820191906000526020600020905b8154815290600101906020018083116104a857829003601f168201915b5050505050905082565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061051057805160ff191683800117855561053e565b8280016001018555821561053e579182015b8281111561053d578251825591602001919060010190610522565b5b50905061054b919061054f565b5090565b61057191905b8082111561056d576000816000905550600101610555565b5090565b9056fea2646970667358221220d9b8ea0e68438465b021c55d52533e2799c85298b041485d12676b8f685f1f4764736f6c63430006000033820a95a04fb0a0148f79be5994927025563b412ba64ca3ce15b5a2a5cf4b005c19241d8ba02267288b37c15e070fa97c405c4e873f27421db0ffeb5f474010a0fbb96cbe7f'), hash=HexBytes('0x51a4f43efbd0ac8e70720656a985248ffb72f3c2ed891bffcf5c821cf1ebbdb4'), r=36044784955203200258714137728901837330792017325785937546283780484662338788747, s=15560901922661411880291828292633874511709171594774418215763066357919167331967, v=2709)

# 3. Send this signed transaction:
print("Deploying contract...")
tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
# print(tx_hash)

# a good practice is to wait for some block confirmations to happen:
tx_reciept = w3.eth.wait_for_transaction_receipt(tx_hash)
# print(tx_reciept)
print("Deployed!")

# To work with contracts, we need:
# 1. Contract ABI
# 2. Contract address

simple_storage = w3.eth.contract(address=tx_reciept.contractAddress, abi=abi)

# when making transactions within a blockchain, there are 2 ways we acan interact with them
# Call -> doesnt make a stte change on the bloackchain, like readin  a value (simulates a transaction)
# Transacton -> build a transaction, and actually make a state change
print(simple_storage.functions.retrieve().call())
# ^^^^ This one is the inital value of the favourite number

# Do a transaction by storing a favouriteNumber
print("Calling contract....")
store_transaction = simple_storage.functions.store(15).buildTransaction(
    {
        "gasPrice": w3.eth.gas_price,
        "chainId": chain_id,
        "from": my_address,
        "nonce": nonce + 1,
    }
)

signed_store_txn = w3.eth.account.sign_transaction(
    store_transaction, private_key=private_key
)
tx_hash = w3.eth.send_raw_transaction(signed_store_txn.rawTransaction)
tx_reciept = w3.eth.wait_for_transaction_receipt(tx_hash)
print("Done!")
print(simple_storage.functions.retrieve().call())
